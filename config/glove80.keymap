/*
 * Copyright (c) 2020 The ZMK Contributors
 * Copyright (c) 2023 Innaworks Development Limited, trading as MoErgo
 *
 * SPDX-License-Identifier: MIT
 */
/* THIS FILE WAS GENERATED BY GLOVE80 LAYOUT EDITOR
 *
 * This file was generated automatically. You may or may not want to
 * edit it directly.
 */
/* Include all behavior includes needed */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/rgb.h>

// /* On demand includes */
// /* Automatically generated layer name #define */

#define LAYER_Base 0
#define LAYER_Lower 1
#define LAYER_Symbol 2
#define LAYER_Magic 3
#define LAYER_Normal 4

// /* Custom Device-tree */

&caps_word { continue-list = <UNDERSCORE MINUS FSLH BSPC DEL>; };

&sk { release-after-ms = <200>; };

/ {
    macros {
        rgb_ug_status_macro: rgb_ug_status_macro {
            label = "RGB_UG_STATUS";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&rgb_ug RGB_STATUS>;
        };

        bt_0: bt_0 {
            label = "BT_0";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 0>;
        };

        bt_1: bt_1 {
            label = "BT_1";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 1>;
        };

        bt_2: bt_2 {
            label = "BT_2";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 2>;
        };

        bt_3: bt_3 {
            label = "BT_3";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 3>;
        };

        // German caret, dead key combo ^ > SPACE

        GER_CARET: GER_CARET {
            label = "&GER_CARET";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp GRAVE &kp SPACE>;
        };

        // German grave_accent `, dead key combo ` > SPACE

        GER_GRAVE_RIGHT: GER_GRAVE_RIGHT {
            label = "&GER_GRAVE_RIGHT";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LS(EQUAL) &kp SPACE>;
        };

        // German grave_accent ´, dead key combo ´ > SPACE

        GER_GRAVE_LEFT: GER_GRAVE_LEFT {
            label = "&GER_GRAVE_LEFT";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp EQUAL &kp SPACE>;
        };
    };
};

/* #define for key positions */

#define POS_LH_T1 52
#define POS_LH_T2 53
#define POS_LH_T3 54
#define POS_LH_T4 69
#define POS_LH_T5 70
#define POS_LH_T6 71
#define POS_LH_C1R2 15
#define POS_LH_C1R3 27
#define POS_LH_C1R4 39
#define POS_LH_C1R5 51
#define POS_LH_C2R1 4
#define POS_LH_C2R2 14
#define POS_LH_C2R3 26
#define POS_LH_C2R4 38
#define POS_LH_C2R5 50
#define POS_LH_C2R6 68
#define POS_LH_C3R1 3
#define POS_LH_C3R2 13
#define POS_LH_C3R3 25
#define POS_LH_C3R4 37
#define POS_LH_C3R5 49
#define POS_LH_C3R6 67
#define POS_LH_C4R1 2
#define POS_LH_C4R2 12
#define POS_LH_C4R3 24
#define POS_LH_C4R4 36
#define POS_LH_C4R5 48
#define POS_LH_C4R6 66
#define POS_LH_C5R1 1
#define POS_LH_C5R2 11
#define POS_LH_C5R3 23
#define POS_LH_C5R4 35
#define POS_LH_C5R5 47
#define POS_LH_C5R6 65
#define POS_LH_C6R1 0
#define POS_LH_C6R2 10
#define POS_LH_C6R3 22
#define POS_LH_C6R4 34
#define POS_LH_C6R5 46
#define POS_LH_C6R6 64
#define POS_RH_T1 57
#define POS_RH_T2 56
#define POS_RH_T3 55
#define POS_RH_T4 74
#define POS_RH_T5 73
#define POS_RH_T6 72
#define POS_RH_C1R2 16
#define POS_RH_C1R3 28
#define POS_RH_C1R4 40
#define POS_RH_C1R5 58
#define POS_RH_C2R1 5
#define POS_RH_C2R2 17
#define POS_RH_C2R3 29
#define POS_RH_C2R4 41
#define POS_RH_C2R5 59
#define POS_RH_C2R6 75
#define POS_RH_C3R1 6
#define POS_RH_C3R2 18
#define POS_RH_C3R3 30
#define POS_RH_C3R4 42
#define POS_RH_C3R5 60
#define POS_RH_C3R6 76
#define POS_RH_C4R1 7
#define POS_RH_C4R2 19
#define POS_RH_C4R3 31
#define POS_RH_C4R4 43
#define POS_RH_C4R5 61
#define POS_RH_C4R6 77
#define POS_RH_C5R1 8
#define POS_RH_C5R2 20
#define POS_RH_C5R3 32
#define POS_RH_C5R4 44
#define POS_RH_C5R5 62
#define POS_RH_C5R6 78
#define POS_RH_C6R1 9
#define POS_RH_C6R2 21
#define POS_RH_C6R3 33
#define POS_RH_C6R4 45
#define POS_RH_C6R5 63
#define POS_RH_C6R6 79

// DIFFICULTY_THRESHOLD specifies your level of expertise with this keymap.
// It's meant to help newcomers gradually work their way up to mastery.
// You can disable this setting by omitting it or assigning a `0` zero.

#define DIFFICULTY_THRESHOLD 200 // 500ms: easy -> 100ms: hard

// HOLDING_TIME defines how long you need to hold (milliseconds)
// home row mod keys in order to send their modifiers to the computer
// (i.e. "register" them) for mod-click mouse usage (e.g. Ctrl-Click).

#define HOLDING_TIME 250
#define PINKEY_DIFFICULTY_OFFSET (DIFFICULTY_THRESHOLD / 8)
#define TAP_DANCE_TAPPING_TIME (DIFFICULTY_THRESHOLD - 25)

// HOLDING_TYPE defines the flavor of ZMK hold-tap behavior to use
// for the pinky, ring, and middle fingers (which are assigned to Super,
// Alt, and Ctrl respectively in the Miryoku system) on home row keys.

#define HOLDING_TYPE "tap-preferred"

// STREAK_DECAY defines how long you need to wait (milliseconds)
// after typing before you can use home row mods again. It prevents
// unintended activation of home row mods when you're actively typing.

#define STREAK_DECAY 250

// REPEAT_DECAY defines how much time you have left (milliseconds)
// after tapping a key to hold it again in order to make it auto-repeat.

#define REPEAT_DECAY 200 // "tap then hold" for key auto-repeat

/* Custom Defined Behaviors */

/ {
    behaviors {
        /* Glove80 system behavior & macros */
        // For the "layer" key, it'd nice to be able to use it as either a shift or a toggle.
        // Configure it as a tap dance, so the first tap (or hold) is a &mo and the second tap is a &to

        lower: lower {
            compatible = "zmk,behavior-tap-dance";
            label = "LAYER_TAP_DANCE";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&mo LAYER_Lower>, <&to LAYER_Lower>;
        };

        magic: magic {
            compatible = "zmk,behavior-hold-tap";
            label = "MAGIC_HOLD_TAP";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
            bindings = <&mo>, <&rgb_ug_status_macro>;
        };

        /*
        Glove80 key positions index for positional hold-tap
        - https://discord.com/channels/877392805654306816/937645688244826154/1066713913351221248
        - https://media.discordapp.net/attachments/937645688244826154/1066713913133121556/image.png
        
        |------------------------|------------------------|
        | LEFT_HAND_KEYS         |        RIGHT_HAND_KEYS |
        |                        |                        |
        |  0  1  2  3  4         |          5  6  7  8  9 |
        | 10 11 12 13 14 15      |      16 17 18 19 20 21 |
        | 22 23 24 25 26 27      |      28 29 30 31 32 33 |
        | 34 35 36 37 38 39      |      40 41 42 43 44 45 |
        | 46 47 48 49 50 51      |      58 59 60 61 62 63 |
        | 64 65 66 67 68         |         75 76 77 78 79 |
        |                69 52   |   57 74                |
        |                 70 53  |  56 73                 |
        |                  71 54 | 55 72                  |
        |------------------------|------------------------|
        */

        #define LEFT_HAND_KEYS      \
            0  1  2  3  4         \
            10 11 12 13 14 15      \
            22 23 24 25 26 27      \
            34 35 36 37 38 39      \
            46 47 48 49 50 51      \
            64 65 66 67 68
        #define RIGHT_HAND_KEYS     \
                                            5  6  7  8  9 \
                                        16 17 18 19 20 21 \
                                        28 29 30 31 32 33 \
                                        40 41 42 43 44 45 \
                                        58 59 60 61 62 63 \
                                            75 76 77 78 79
        #define THUMB_KEYS          \
                            69 52       57 74                \
                            70 53     56 73                 \
                            71 54   55 72

        left_pinky: homey_left_pinky {
            compatible = "zmk,behavior-hold-tap";
            flavor =
            HOLDING_TYPE;
            hold-trigger-key-positions = <RIGHT_HAND_KEYS THUMB_KEYS>;
            hold-trigger-on-release; // wait for other home row mods
            tapping-term-ms = <(HOLDING_TIME + PINKEY_DIFFICULTY_OFFSET)>;
            quick-tap-ms = <REPEAT_DECAY>;
            require-prior-idle-ms = <STREAK_DECAY>;
            #binding-cells = <2>;
            bindings = <&kp>, <&kp>;
        };

        right_pinky: homey_right_pinky {
            compatible = "zmk,behavior-hold-tap";
            flavor =
            HOLDING_TYPE;
            hold-trigger-key-positions = <RIGHT_HAND_KEYS THUMB_KEYS>;
            hold-trigger-on-release; // wait for other home row mods
            tapping-term-ms = <(HOLDING_TIME + PINKEY_DIFFICULTY_OFFSET)>;
            quick-tap-ms = <REPEAT_DECAY>;
            require-prior-idle-ms = <STREAK_DECAY>;
            #binding-cells = <2>;
            bindings = <&kp>, <&kp>;
        };

        left_ring: homey_left_ring {
            compatible = "zmk,behavior-hold-tap";
            flavor =
            HOLDING_TYPE;
            hold-trigger-key-positions = <RIGHT_HAND_KEYS THUMB_KEYS>;
            hold-trigger-on-release; // wait for other home row mods
            tapping-term-ms = <HOLDING_TIME>;
            quick-tap-ms = <REPEAT_DECAY>;
            require-prior-idle-ms = <STREAK_DECAY>;
            #binding-cells = <2>;
            bindings = <&kp>, <&kp>;
        };

        right_ring: homey_right_ring {
            compatible = "zmk,behavior-hold-tap";
            flavor =
            HOLDING_TYPE;
            hold-trigger-key-positions = <LEFT_HAND_KEYS THUMB_KEYS>;
            hold-trigger-on-release; // wait for other home row mods
            tapping-term-ms = <HOLDING_TIME>;
            quick-tap-ms = <REPEAT_DECAY>;
            require-prior-idle-ms = <STREAK_DECAY>;
            #binding-cells = <2>;
            bindings = <&kp>, <&kp>;
        };

        left_middy: homey_left_middy {
            compatible = "zmk,behavior-hold-tap";
            flavor =
            HOLDING_TYPE;
            hold-trigger-key-positions = <RIGHT_HAND_KEYS THUMB_KEYS>;
            hold-trigger-on-release; // wait for other home row mods
            tapping-term-ms = <HOLDING_TIME>;
            quick-tap-ms = <REPEAT_DECAY>;
            require-prior-idle-ms = <STREAK_DECAY>;
            #binding-cells = <2>;
            bindings = <&kp>, <&kp>;
        };

        right_middy: homey_right_middy {
            compatible = "zmk,behavior-hold-tap";
            flavor =
            HOLDING_TYPE;
            hold-trigger-key-positions = <LEFT_HAND_KEYS THUMB_KEYS>;
            hold-trigger-on-release; // wait for other home row mods
            tapping-term-ms = <HOLDING_TIME>;
            quick-tap-ms = <REPEAT_DECAY>;
            require-prior-idle-ms = <STREAK_DECAY>;
            #binding-cells = <2>;
            bindings = <&kp>, <&kp>;
        };
    };
};

/ {
    macros {
        // ^

        ZMK_MACRO(GER_CARET,

        bindings = <&kp GRAVE>, <&kp SPACE>;

        )

        // `

        ZMK_MACRO(

        GER_GRAVE_RIGHT,
        bindings = <&kp LS(EQUAL)>, <&kp SPACE>;

        )

        // ´

        ZMK_MACRO(

        GER_GRAVE_LEFT,
        bindings = <&kp EQUAL>, <&kp SPACE>;

        )

        ZMK_MACRO(

        PREV_TAB,
        bindings = <&kp LC(LS(TAB))>;

        )

        ZMK_MACRO(

        NEXT_TAB,
        bindings = <&kp LC(TAB)>;

        )

        ZMK_MACRO(

        NAVIGATE_BACK,
        bindings = <&kp LC(LEFT)>;

        )

        ZMK_MACRO(

        NAVIGATE_FORWARD,
        bindings = <&kp LC(RIGHT)>;

        )

        TD_PLAY_SKIP: TD_PLAY_SKIP {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <250>;
            bindings = <&kp C_PLAY_PAUSE>, <&kp C_NEXT>;
        };
    };
};

/* Automatically generated keymap */

/ {
    keymap {
        compatible = "zmk,keymap";

        layer_Base {
            bindings = <
&kp F1                &kp F2              &kp F3             &kp F4               &kp F5                                                                                                 &kp F8    &kp F9                &kp F10             &kp F11              &kp F12
&none                 &kp N1              &kp N2             &kp N3               &kp N4     &kp N5                                                                              &kp N6  &kp N7    &kp N8                &kp N9              &kp N0               &kp LG(L)
&kp TAB               &kp Q               &kp W              &kp F                &kp P      &kp B                                                                               &kp K   &kp L     &kp U                 &kp Y               &kp SEMI             &kp LBKT
&kp ESC               &left_pinky LGUI A  &left_ring LALT R  &left_middy LCTRL S  &lt 1 T    &kp G                                                                               &kp M   &lt 1 N   &right_middy RCTRL E  &right_ring RALT I  &right_pinky LGUI O  &kp SQT
&tog LAYER_Lower      &kp Z               &kp X              &kp C                &kp D      &kp V   &kp DEL    &kp LALT   &TD_PLAY_SKIP  &kp RSHFT       &kp LGUI  &kp RCTRL    &kp J   &kp H     &kp COMMA             &kp DOT             &kp MINUS            &kp C_VOL_UP
&magic LAYER_Magic 0  &kp HOME            &kp END            &kp LEFT             &kp RIGHT          &kp LSHFT  &lt 2 RET  &kp LCTRL      &mt LALT K_APP  &kp BSPC  &lt 1 SPACE          &kp DOWN  &kp UP                &kp LC(LS(M))       &kp C_MUTE           &kp C_VOL_DN
            >;
        };

        layer_Lower {
            bindings = <
&trans  &trans                         &trans                        &trans                      &trans                                                                        &trans    &trans   &trans     &trans          &trans
&trans  &trans                         &kp C_PREV                    &kp C_PP                    &kp C_NEXT  &trans                                                  &trans    &trans    &trans   &trans     &trans          &trans
&trans  &kp F1                         &kp F2                        &kp F3                      &kp F4      &kp F5                                                  &kp F9    &kp F10   &kp F11  &kp F12    &PREV_TAB       &trans
&trans  &left_pinky LEFT_WIN NUMBER_1  &left_ring LEFT_ALT NUMBER_2  &left_middy LCTRL NUMBER_3  &kp N4      &kp N5                                                  &kp LEFT  &kp DOWN  &kp UP   &kp RIGHT  &NAVIGATE_BACK  &NAVIGATE_FORWARD
&trans  &kp N6                         &kp N7                        &kp N8                      &kp N9      &kp N0  &trans  &trans  &trans  &trans  &trans  &trans  &kp HOME  &kp END   &trans   &trans     &NEXT_TAB       &trans
&trans  &trans                         &trans                        &trans                      &trans              &trans  &trans  &trans  &trans  &trans  &trans            &trans    &trans   &trans     &trans          &trans
            >;
        };

        layer_Symbol {
            bindings = <
&none             &none            &none        &none                    &none                                                                                            &none         &none           &none           &none                &none
&none             &kp F1           &kp F2       &kp F3                   &kp F4         &kp F5                                                         &kp F6             &kp F7        &kp F8          &kp F9          &kp F10              &none
&none             &kp KP_MULTIPLY  &kp KP_PLUS  &kp KP_MINUS             &kp LS(N0)     &kp BSLH                                                       &kp LC(LA(MINUS))  &kp KP_SLASH  &kp LS(N2)      &kp LS(BSLH)    &GER_GRAVE_RIGHT     &GER_GRAVE_LEFT
&none             &kp LS(FSLH)     &kp LS(DOT)  &kp LS(COMMA)            &kp LS(MINUS)  &kp LS(N1)                                                     &kp LS(N4)         &kp LS(N8)    &kp LC(LA(N7))  &kp LC(LA(N8))  &kp NON_US_BSLH      &none
&kp LC(LA(RBKT))  &GER_CARET       &kp LS(N6)   &kp LC(LA(NON_US_BSLH))  &kp LS(N5)     &kp LC(LA(Q))  &trans  &trans  &trans  &trans  &trans  &trans  &kp LC(LA(E))      &kp LS(N9)    &kp LC(LA(N0))  &kp LC(LA(N9))  &kp LS(NON_US_BSLH)  &none
&none             &none            &none        &none                    &none                         &trans  &trans  &trans  &trans  &trans  &trans                     &none         &none           &none           &none                &none
            >;
        };

        layer_Magic {
            bindings = <
&bt BT_CLR   &none            &none            &none            &none                                                                                     &none  &none  &none  &none  &bt BT_CLR_ALL
&to 0        &to 1            &to 2            &to 3            &tog 4           &none                                                             &none  &none  &none  &none  &none  &none
&none        &rgb_ug RGB_SPI  &rgb_ug RGB_SAI  &rgb_ug RGB_HUI  &rgb_ug RGB_BRI  &rgb_ug RGB_TOG                                                   &none  &none  &none  &none  &none  &none
&bootloader  &rgb_ug RGB_SPD  &rgb_ug RGB_SAD  &rgb_ug RGB_HUD  &rgb_ug RGB_BRD  &rgb_ug RGB_EFF                                                   &none  &none  &none  &none  &none  &bootloader
&sys_reset   &none            &none            &none            &none            &none            &bt_2  &bt_3  &none         &none  &none  &none  &none  &none  &none  &none  &none  &sys_reset
&none        &none            &none            &none            &none                             &bt_0  &bt_1  &out OUT_USB  &none  &none  &none         &none  &none  &none  &none  &none
            >;
        };

        layer_Normal {
            bindings = <
&kp F1                &kp F2    &kp F3   &kp F4    &kp F5                                                                                       &kp F6    &kp F7     &kp F8    &kp F9    &kp F10
&kp GRAVE             &kp N1    &kp N2   &kp N3    &kp N4     &kp N5                                                                    &kp N6  &kp N7    &kp N8     &kp N9    &kp N0    &kp MINUS
&kp TAB               &kp Q     &kp W    &kp E     &kp R      &kp T                                                                     &kp Y   &kp U     &kp I      &kp O     &kp P     &kp LBKT
&kp ESC               &kp A     &kp S    &kp D     &kp F      &kp G                                                                     &kp H   &kp J     &kp K      &kp L     &kp SEMI  &kp SQT
&tog 4                &kp Z     &kp X    &kp C     &kp V      &kp B   &kp LSHFT  &kp LCTRL  &lower    &kp LGUI  &kp RCTRL  &kp RSHFT    &kp N   &kp M     &kp COMMA  &kp DOT   &kp FSLH  &kp PG_UP
&magic LAYER_Magic 0  &kp HOME  &kp END  &kp LEFT  &kp RIGHT          &kp BSPC   &kp DEL    &kp LALT  &kp RALT  &kp RET    &lt 2 SPACE          &kp DOWN  &kp UP     &kp BSLH  &kp RBKT  &kp PG_DN
            >;
        };
    };
};
